
@mixin font-size($sizevalue: 1.6, $basesize: 10) {
  font-size: ($sizevalue * $basesize) + px;
  font-size: $sizevalue + em;
}

@mixin font-size-em($sizevalue: 1, $base-font-size: 1.4, $base-size: 10) {
  font-size: ($sizevalue * ($base-font-size * $base-size)) + px;
  font-size: ($sizevalue) + em;
}

@mixin contrasted($background-color, $dark: $contrasted-dark-default, $light: $contrasted-light-default, $threshold: null) {
  @if $threshold {
    // Deprecated in Compass 0.13
    @warn "The $threshold argment to contrasted is no longer needed and will be removed in the next release.";
  }
  background-color: $background-color;
  color: contrast-color($background-color, $dark, $light);
}

@mixin link-styles($basecolor, $link-dark, $link-light) {
  a {
    $selectedcolor: color-contrast($basecolor, $link-dark, $link-light);
    color: $selectedcolor;

    @if ($link-decoration != none) {
      text-decoration: $link-decoration;
    }

    &:visited,
    &:focus,
    &:active {
      color: $selectedcolor;
    }

    &:hover {
      @if $selectedcolor == $link-dark{
        color: $link-color-default-alt;
      }@else{
        color: $link-color-invert-alt;
      }
    }
  }
}

// breakpoints
@mixin bp($point, $break-point: 0) {
  @if $point == hiscreeny {
    @media only screen and (-webkit-min-device-pixel-ratio: 2) and (min-width: 62.5em),
    only screen and (min--moz-device-pixel-ratio: 2) and (min-width: 62.5em),
    only screen and (-o-min-device-pixel-ratio: 2/1) and (min-width: 62.5em),
    only screen and (min-device-pixel-ratio: 2) and (min-width: 62.5em),
    only screen and (min-resolution: 192dpi) and (min-width: 62.5em),
    only screen and (min-resolution: 2dppx) and (min-width: 62.5em)
    { @content; };
  }
  @if $point == screeny {
    @media (min-width: 62.5em) { @content; };
  }@else if $point == tablish {
    @media (min-width: 38.75em)  { @content; };
  }@else if $point == phony {
    @media (max-width: 38.7em)  { @content; };
  }@else if $point == tinyphony {
    @media (max-width: 25em)  { @content; };
  }@else if ($point == custom) {
    @media (min-width: $break-point) { @content; };
  }
}

// vertical center
@mixin vertical-align {
  position: relative;
  top: 50%;
  -webkit-transform: translateY(-50%);
  -moz-transform: translateY(-50%);
  -ms-transform: translateY(-50%);
  -o-transform: translateY(-50%);
  transform: translateY(-50%)
}

// transitions
@mixin transit($what,$speed,$how) {
  -webkit-transition: $what $speed $how;
  -moz-transition: $what $speed $how;
  -ms-transition: $what $speed $how;
  -o-transition: $what $speed $how;
  transition: $what $speed $how;
}
// translate
@mixin moveit($move-x,$move-y) {
  -webkit-transform: translate($move-x, $move-y);
  -moz-transform: translate($move-x, $move-y);
  -ms-transform: translate($move-x, $move-y);
  -o-transform: translate($move-x, $move-y);
  transform: translate($move-x, $move-y);
}

@mixin clx {
  &:before,
  &:after {
    content: '';
    display: table;
  }

  &:after {
    clear: both;
  }
}

@mixin clr {
  clear: both;
  display: block;
  overflow: hidden;
  visibility: hidden;
  width: 0;
  height: 0;
}

// scale
@mixin pump($pumped) {
  -webkit-transform: scale($pumped);
  -moz-transform: scale($pumped);
  -o-transform: scale($pumped);
  transform: scale($pumped);
}


// Calculeate brightness of a given color.
@function brightness($color) {
  @return ((red($color) * .299) + (green($color) * .587) + (blue($color) * .114)) / 255 * 100%;
}

// Compares contrast of a given color to the light/dark arguments and returns whichever is most "contrasty"
@function color-contrast($color, $dark: $contrasted-dark-default, $light: $contrasted-light-default) {
  @if $color == null {
    @return null;
  }@else {
    $color-brightness: brightness($color);
    $light-text-brightness: brightness($light);
    $dark-text-brightness: brightness($dark);

    @return if(abs($color-brightness - $light-text-brightness) > abs($color-brightness - $dark-text-brightness), $light, $dark);
  }
}



@function pick-visible-color($bg, $c1, $c2) {
  $bg-luma: luma($bg);
  $c1-luma: luma($c1);
  $c2-luma: luma($c2);

  $c1-diff: abs($bg-luma - $c1-luma);
  $c2-diff: abs($bg-luma - $c2-luma);

  @if $c1-diff > $c2-diff {
    @return $c1;
  } @else {
    @return $c2;
  }
}
